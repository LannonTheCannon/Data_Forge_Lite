# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-27 21:09:08

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio





    # Calculate median KM driven grouped by Transmission_Manual and Fuel type_Diesel
    median_df = data_raw.groupby(['Transmission_Manual', 'Fuel type_Diesel'], as_index=False)['KM driven'].median()

    # Prepare categories for x-axis and fuel type
    x_categories = [False, True]
    fuel_types = [False, True]

    # Extract median values for each fuel type within each Transmission_Manual category
    y_values = {fuel: [] for fuel in fuel_types}
    for trans in x_categories:
        for fuel in fuel_types:
            val = median_df.loc[
                (median_df['Transmission_Manual'] == trans) & (median_df['Fuel type_Diesel'] == fuel),
                'KM driven'
            ]
            y_values[fuel].append(val.values[0] if not val.empty else None)

    # Create grouped bar traces for each Fuel type_Diesel
    fig = go.Figure()
    for fuel in fuel_types:
        fig.add_trace(go.Bar(
            name=f'Fuel type Diesel = {fuel}',
            x=[str(t) for t in x_categories],
            y=y_values[fuel],
            offsetgroup=str(fuel)
        ))

    # Update layout for grouped bars and titles
    fig.update_layout(
        barmode='group',
        title="Median KM Driven by Transmission Type and Diesel Fuel Usage",
        xaxis_title="Transmission Manual (False = Automatic, True = Manual)",
        yaxis_title="Median KM Driven",
        xaxis=dict(tickvals=[str(x) for x in x_categories]),
        legend_title="Fuel type_Diesel"
    )
    
    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)
    
    return fig_dict