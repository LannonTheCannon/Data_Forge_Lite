# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_wrangling_agent
# Time Created: 2025-04-27 19:42:38

def data_wrangler(data_list):
    import pandas as pd
    import numpy as np
    '''
    Wrangle the data provided in data_list.
    
    data_list: A list of one or more pandas data frames containing the raw data to be wrangled.
    
    This function investigates how 'Total Sales' vary by 
    'Category_Clothing', 'Category_Electronics', 'Category_Footwear', and 'Category_Home Appliances'.
    '''


    # Ensure data_list is a list even if a single DataFrame is passed
    if not isinstance(data_list, list):
        data_list = [data_list]

    # Since only one dataset 'main' is provided, take the first DataFrame
    main = data_list[0]

    # Step 1: Filter dataset to include only 'Completed' sales status for actual sales analysis
    df_filtered = main[main['Status'] == 'Completed'].copy()

    # Step 2: Select relevant columns for analysis
    category_cols = ['Category_Clothing', 'Category_Electronics', 'Category_Footwear', 'Category_Home Appliances']
    df_categories = df_filtered[['Total Sales'] + category_cols]

    # Step 3: Melt the data to have one row per category per sale with associated Total Sales
    # This reshapes the category columns into a single 'Category' column with corresponding flags
    df_melted = df_categories.melt(id_vars='Total Sales',
                                   value_vars=category_cols,
                                   var_name='Category',
                                   value_name='Flag')

    # Step 4: Filter melted rows where Flag == 1 (sale belongs to that category)
    df_melted = df_melted[df_melted['Flag'] == 1].copy()

    # Step 5: Group by 'Category' and aggregate total sales sum to see sales variation by category
    category_sales = df_melted.groupby('Category')['Total Sales'].sum().reset_index()

    # Step 6: Calculate additional statistics for deeper insights: mean, median, count
    category_stats = df_melted.groupby('Category')['Total Sales'].agg(['sum', 'mean', 'median', 'count']).reset_index()

    # Step 7: Calculate sales percentage contribution of each category based on total sales sum
    total_sales_all = category_stats['sum'].sum()
    category_stats['Sales Percentage'] = category_stats['sum'] / total_sales_all * 100

    # Rename columns for clarity
    category_stats.rename(columns={'sum': 'Total Sales'}, inplace=True)

    # Return the final DataFrame with aggregated statistics and sales percentage by category
    return category_stats